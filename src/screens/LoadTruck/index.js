import * as Services from '../../services';

import {
  Alert,
  BackHandler,
  Pressable,
  ScrollView,
  StatusBar,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import React, { useCallback, useEffect, useState } from 'react';
import {
  heightPercentageToDP as hp,
  listenOrientationChange as loc,
  removeOrientationListener as rol,
  widthPercentageToDP as wp,
} from 'react-native-responsive-screen';

import Card from '../../components/Card';
import { Colors } from '../../themes/colors';
import CustomModal from '../../components/CustomModal';
import { Header } from '../../components/Header';
import ImagePicker from 'react-native-image-crop-picker';
import ImageSection from '../../components/ImageSection';
import Ionicons from 'react-native-vector-icons/Ionicons';
import Moment from 'moment';
import Picker from '../../components/Picker';
import fetchLanguage from '../../utils/language';

const LoadTruckScreen = ({ route, navigation }) => {
  const [logoutLoading, setLogoutLoading] = useState(true);
  const [logoutVisible, setLogoutVisible] = useState(false);
  const [statusLoading, setStatusLoading] = useState(true);
  const [statusVisible, setStatusVisible] = useState(false);
  const [isSuccess, setIsSuccess] = useState(true);
  const [newTask, setNewTask] = useState(false);
  const [lang, setLang] = useState(0);

  const initialState = {
    id: '',
    user_id: null,
    delivery_number: '',
    previous_team: '',
    dateandtime: '',
    photos: [],
  };
  const initialStateError = {
    delivery_number: '',
    previous_team: '',
    photos: '',
    dateandtime: '',
  };
  const [state, setState] = useState(initialState);
  const [stateError, setStateError] = useState(initialStateError);

  const onPressScan = (data, placeholder) => {
    navigation.push('Capture', {
      handleResponse: handleResponse,
      data: data,
      fromHomeScreen: true,
      placeholder: placeholder,
    });
  };

  const handleResponse = useCallback((val, data) => {
    if (data === 'delivery_number') {
      if (val) {
        setState({
          ...state,
          delivery_number: val,
        });
      } else {
        setState({
          ...state,
          delivery_number: '',
        });
      }
    } else {
      if (val) {
        setState({
          ...state,
          previous_team: val,
        });
      } else {
        setState({
          ...state,
          previous_team: '',
        });
      }
    }
    // if (val) {
    //   console.log('QR/BAR CODE ', data, ' : ', val);
    //  else {
    //     setState({
    //       ...state,

    //       previous_team: val,
    //     });
    //   }
    // } else {
    //   console.log('ALAWS NGA');
    // }
  });

  const onTouchOutSideToLogout = () => {
    setLogoutVisible(false);
    setLogoutLoading(true);
    Services.LogoutUser();
    navigation.reset({
      index: 0,
      routes: [{ name: 'Login' }],
    });
  };

  const onTouchOutSideSuccess = () => {
    setStatusVisible(false);
    setStatusLoading(true);
    setIsSuccess(false);
    setState({
      ...initialState,
    });
    setNewTask(false);
  };

  const onPressSubmitTask = () => {
    Services.getCurrentLocation().then((loc) => {
      console.log('CURRENT LOC : ', loc);
      const tempLoc = loc && {
        gps_string: `${loc.latitude},${loc.longitude}`,
      };

      if (!state.delivery_number) {
        Alert.alert(
          '',
          fetchLanguage[lang].pleaseinputrequired,
          [
            {
              text: 'OK',
              onPress: () => {},
            },
          ],
          { cancelable: false }
        );
        return;
      }
      // const task = {
      // document_no: state.delivery_number,
      // previous_team: state.previous_team,
      // service_order_no: state.delivery_number,
      // };
      setStatusVisible(true);

      // console.log(state.id, 'oqjwoofjepfjweopfjo ! : ', task);
      // Services.updateLoadTruck(state.id, task).then((res) => {
      //   console.log('LOAD TRUCK UPLOAD RESULT ! : ', res);
      //   if (!res) {
      //     Alert.alert(
      //       '',
      //       fetchLanguage[lang].somethingwentwrong,
      //       [
      //         {
      //           text: 'OK',
      //           onPress: () => {},
      //         },
      //       ],
      //       {cancelable: false},
      //     );
      //     setState({...initialState});
      //     setNewTask(false);
      // } else {
      // if (state.photos.length < 1) {
      //   setStatusLoading(false);
      //   setIsSuccess(true);
      //   return;
      // } else {
      let temp = {
        bill_no: state?.delivery_number || '',
        remarks: 'generated by load truck',
        customer_id: 1,
        status_id: 1,
        assembly: false,
        location: locationFromLogin,
        ...tempLoc,
        // gps_string: `${loc.latitude},${loc.longitude}`,
      };

      Services.uploadTask(temp).then((res) => {
        console.log(' UPLOADING TASK ! : ', res);
        if (res) {
          uploadPhoto(res.id);
        }
      });
      // }
      // }
      // });
    });
  };
  const uploadPhoto = (task_id) => {
    var fileCount = state.photos.length;
    var imagesContainer = state.photos;
    var loopCount = 0;
    console.log('Your final State: ', state);
    if (fileCount < 1) {
      setStatusLoading(false);
      setIsSuccess(true);
      return;
    }

    for (let i = 0; i <= fileCount - 1; i++) {
      const temp = {
        task_id: task_id,
        bill_no: state.delivery_number,
        image: `data:${imagesContainer[i].mime};base64,${imagesContainer[i].data}`,
      };
      Services.uploadPhoto(temp).then((res) => {
        loopCount++;

        console.log(fileCount, ' uploading image! : ', loopCount);
        if (loopCount === fileCount) {
          setStatusLoading(false);
          setIsSuccess(true);
        }
      });
    }
  };

  const openCamera = () => {
    clearCachedImages();
    ImagePicker.openCamera({
      cropping: false,
      includeBase64: true,
    }).then((image) => {
      const temp = state.photos.concat(image);

      console.log('camera mo : ', temp);

      setState({ ...state, photos: temp });
    });
  };

  const clearCachedImages = () => {
    ImagePicker.clean()
      .then(() => {
        console.log('removed all tmp images from tmp directory');
      })
      .catch((e) => {
        console.log(
          'error removed all tmp images from tmp directory'
        );
      });
  };

  const onDeletePicture = (l) => {
    console.log('deleting item : ', l);

    const temp = state.photos.filter(
      (photo) => photo.data !== l.data
    );
    console.log('new array of photos : ', temp);

    setState({ ...state, photos: temp });
  };

  const onToggleTaskButton = () => {
    if (!newTask) {
      setNewTask(!newTask);

      setState({
        ...initialState,
        dateandtime: Moment().format('MMMM Do YYYY, h:mm:ss a'),
      });
    } else {
      onPressSubmitTask();
    }
  };

  const checkBackHandler = () => {
    return true;
  };

  useEffect(() => {
    BackHandler.addEventListener(
      'hardwareBackPress',
      checkBackHandler
    );

    return () => {
      BackHandler.removeEventListener(
        'hardwareBackPress',
        checkBackHandler
      );
    };
  }, [checkBackHandler]);

  // useEffect(() => {
  //   const unsubscribe = navigation.addListener('focus', () => {
  //     setNewTask(false);
  //     setState({...initialState});
  //   });
  //   return unsubscribe;
  // }, [navigation]);
  const [locationFromLogin, setLocationFromLogin] = useState('');

  useEffect(() => {
    Services.retrieveData('user').then((res) => {
      console.log('user fields : ', res);
      if (!res || res.status === 'failed') {
        setLogoutVisible(true);
        setTimeout(() => {
          setLogoutLoading(false);
        }, 1500);
      } else {
        setLocationFromLogin(res?.gps_login_location || 'None');

        setLang(res.language === 'ENG' ? 0 : 1);
      }
    });
  }, []);

  return (
    <>
      <View
        style={{
          flex: 1,
          backgroundColor: '#fff',
          padding: wp('4%'),
        }}
      >
        <CustomModal
          visible={logoutVisible}
          loading={logoutLoading}
          onTouchOutside={() => onTouchOutSideToLogout()}
          text={'Session timeout!'}
        />
        <CustomModal
          visible={statusVisible}
          loading={statusLoading}
          onTouchOutside={() => onTouchOutSideSuccess()}
          text={
            isSuccess
              ? 'Updated Successfully!'
              : 'Something went wrong!'
          }
        />

        <Header title="LOAD TRUCK" navigation={navigation} />

        <ScrollView showsVerticalScrollIndicator={false}>
          <Card style={{ paddingHorizontal: 10 }}>
            <Picker
              setValue={handleResponse}
              type="delivery_number"
              placeholder={fetchLanguage[lang].scan_now}
              title={fetchLanguage[lang].freightnoteno}
              value={state.delivery_number}
              onPress={() =>
                onPressScan('delivery_number', 'Bill No.')
              }
              error={stateError.delivery_number}
              disabled={!newTask}
            />
            <Picker
              setValue={handleResponse}
              type="previous_team"
              placeholder={fetchLanguage[lang].scan_now}
              title={fetchLanguage[lang].trucknumber}
              value={state.previous_team}
              onPress={() =>
                onPressScan('previous_team', 'Truck No.')
              }
              error={stateError.previous_team}
              disabled={!newTask}
            />
            <View
              style={{ paddingVertical: 15, flexDirection: 'row' }}
            >
              <Text>{fetchLanguage[lang].datestamp}</Text>
              <Text style={{ paddingStart: 10 }}>
                {newTask ? state.dateandtime : ''}
              </Text>
            </View>
            <ImageSection
              title={fetchLanguage[lang].attachimages}
              value={state.photos}
              onPress={() => openCamera()}
              onDeletePicture={(data) => onDeletePicture(data)}
              disabled={!newTask}
            />
            <View style={{ height: hp('7%') }} />
          </Card>
        </ScrollView>

        <View
          style={{
            position: 'absolute',
            right: 0,
            left: 0,
            bottom: 30,
          }}
        >
          <Pressable
            disabled={newTask && !statusLoading}
            onPress={() => onToggleTaskButton()}
            style={({ pressed }) => [
              {
                backgroundColor: statusLoading
                  ? Colors.primary
                  : 'gray',
                padding: pressed ? wp('3%') : wp('3.5%'),
                alignSelf: 'center',
                elevation: 5,
                width: pressed ? wp('33%') : wp('34%'),
                borderRadius: 40,
              },
            ]}
          >
            <Text
              style={{
                fontSize: 20,
                color: '#fff',
                textAlign: 'center',
              }}
            >
              {newTask
                ? fetchLanguage[lang].submit
                : fetchLanguage[lang].new}
            </Text>
          </Pressable>
        </View>
      </View>
    </>
  );
};

export default LoadTruckScreen;
